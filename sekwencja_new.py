#Script generated by SupremolecularAnalyser
import sys

sys.path.insert(0, "/net/archive/groups/plggkatksdh/pyplotTest")

import matplotlib.pyplot as plt
from simpleFilters import *
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.colors as mcolors
from os.path import isdir, join, basename
from os import makedirs, remove
from glob import glob
import json
from collections import defaultdict
from itertools import combinations
from math import pi
mpl.rcParams['mathtext.default'] = 'regular'

logDir = "logs/"
postprocessingDir = "postprocessing/"
resUniqueDir = join(postprocessingDir, "general")

if not isdir(resUniqueDir):
	makedirs(resUniqueDir)

# cases2run = { "preprocessing" : True, "a-g" : True, "UniqueSeq" : True,  "histogram2d" : True,
#        "histogram2d-planar" : True, "histograms-linear" : True , "barplots": True , "resolutionplot":False,
#        "occurencesTable" : True, "occurencesPairs" : True,
#        "chainNeoghbors" : True }

cases2run = { "preprocessing" : False, "a-g" : False, "UniqueSeq" : False,  "histogram2d" : True,
       "histogram2d-planar" : False, "histograms-linear" : False , "barplots": False , "resolutionplot":False,
       "occurencesTable" : False, "occurencesPairs" : False,
       "chainNeoghbors" : False }


def saveUniqueRecordsSeq( logPath, logOut, chain1Key, chain2Key, headersSubset ):
  print("Aktualnie przetwarzam: ", logPath)

  uniqueSeqDf = pd.read_csv("chainClusters.csv", sep = "\t")

  uniqueSeqDf1 = uniqueSeqDf.rename( columns = { "Chain" : chain1Key, "Sequence ID" : "Sequence ID 1"  } )
  uniqueSeqDf2 = uniqueSeqDf.rename( columns = { "Chain" : chain2Key, "Sequence ID" : "Sequence ID 2"  } )

  df = pd.read_table(logPath)

  df = pd.merge( df, uniqueSeqDf1, on = [ "PDB Code" , chain1Key ], how='left', indicator=True )
  df = df.rename( columns = {'_merge' : "seq1 origin" } )
  df = pd.merge( df, uniqueSeqDf2, on = [ "PDB Code" , chain2Key ], how='left', indicator=True )
  df = df.rename( columns = {'_merge' : "seq2 origin" } )
  df = df.sort_values(by=['Distance'],ascending=True)

  dfRecognisedSeqSameChains = df[ ( ( df["seq1 origin"] == "both" ) | ( df["seq2 origin"] == "both" ) ) & ( df[chain1Key] == df[chain2Key]  ) ].drop_duplicates(subset = headersSubset + [ "Sequence ID 1", "Sequence ID 2" ] )
  dfRecognisedSeqDifferentChains = df[ ( ( df["seq1 origin"] == "both" ) | ( df["seq2 origin"] == "both" ) ) & ( df[chain1Key] != df[chain2Key]  ) ].drop_duplicates(subset = headersSubset + [ "Sequence ID 1", "Sequence ID 2" ] )
  
  dfNotRecognisedSeq = df[ ( df["seq1 origin"] == "left_only" ) & ( df["seq2 origin"] == "left_only" )  ].drop_duplicates(subset = headersSubset + [  "PDB Code" ] )

  df = pd.concat( [ dfRecognisedSeqSameChains, dfRecognisedSeqDifferentChains, dfNotRecognisedSeq ], ignore_index = True )

  df.to_csv(logOut,sep='\t')
  num_lines = sum(1 for line in open(logOut))-1
  num_lines2 = sum(1 for line in open(logPath))-1

  print(num_lines)
  print(num_lines2)

  return logOut

logAnionPi = join( logDir, "anionPi.log" )
logAnionCation = join(logDir, "anionCation.log")
logCationPi = join( logDir, "cationPi.log" )
logPiPi = join( logDir, "piPi.log")
logMethylPi = join(logDir, "methylPi.log")
logPlanarAnionPi = join(logDir, "planarAnionPi.log")
logLinearAnionPi = join( logDir,  "linearAnionPi.log")

if cases2run["preprocessing"] or cases2run["a-g"]:
  AnionPi = pd.read_csv( logAnionPi, sep = "\t").fillna("NA") 
  # LinearAnionPi = pd.read_csv( logdir+"linearAnionPi.log", sep = "\t").fillna("NA") 
  AnionCation = pd.read_csv( logAnionCation, sep = "\t").fillna("NA")
  HBonds = pd.read_csv( logDir+"hBonds.log", sep = "\t").fillna("NA") 
  CationPi = pd.read_csv( logCationPi, sep = "\t").fillna("NA") 
  PiPi = pd.read_csv( logPiPi, sep = "\t").fillna("NA") 
  # MetalLigand = pd.read_csv( logdir+"metalLigand.log", sep = "\t").fillna("NA") 
  # PlanarAnionPi = pd.read_csv( logPlanarAnionPi, sep = "\t").fillna("NA") 
if cases2run["preprocessing"]:
  methylPi = pd.read_csv( logMethylPi, sep = "\t").fillna("NA") 

resolution = pd.read_csv("resolu.idx", sep = "\s+")
resOK = resolution[(resolution["RESOLUTION"]<=2.5) & (resolution["RESOLUTION"]>0)]["IDCODE"]

##################################################################################################
logAnionPiRes = join(resUniqueDir, "anionPi_res.log")
logMethylPiRes =  join(resUniqueDir, "methylPi_res.log")
logCationPiRes = join(resUniqueDir, "cationPi_res.log")
logPiPiRes = join(resUniqueDir, "piPi_res.log")

if cases2run["preprocessing"]:
  def keepHighResolution(df, logName):
  	df_temp = df[ df ['PDB Code'].isin(resOK)]
  	# logName = join(resUniqueDir, baseName+"_res.log")
  	df_temp.to_csv( logName, sep = "\t")
  	return logName

  keepHighResolution(AnionPi, logAnionPiRes )
  keepHighResolution(methylPi, logMethylPiRes )
  keepHighResolution(CationPi, logCationPiRes)
  keepHighResolution(PiPi, logPiPiRes)
  

##################################################################################################
logAnionPiResRingPlane = join(resUniqueDir, "anionPi_res_ring_plane.log")

if cases2run["preprocessing"]:
  AnionPi_temp = AnionPi
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] > 3 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 4.9 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 1 ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Distance" ] <= 4.5 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp ['PDB Code'].isin(resOK)]
  AnionPi_temp.to_csv( logAnionPiResRingPlane, sep = "\t")

##################################################################################################
logAnionPiResCylinder = join(resUniqueDir, "anionPi_res_cylinder.log")

if cases2run["preprocessing"]:
  AnionPi_temp = AnionPi
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 1.8 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] > 1.5 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 4.5 ]  
  AnionPi_temp = AnionPi_temp[ AnionPi_temp ['PDB Code'].isin(resOK)]
  AnionPi_temp.to_csv( logAnionPiResCylinder, sep = "\t")

##################################################################################################
logAnionPiResDiag = join(resUniqueDir, "anionPi_res_norCylinderNorPlane.log")

if cases2run["preprocessing"]:
  AnionPi_temp = AnionPi
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] > 1.8 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 3.25 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] > 2.4 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 3.8 ]  
  AnionPi_temp = AnionPi_temp[ AnionPi_temp ['PDB Code'].isin(resOK)]
  AnionPi_temp.to_csv( logAnionPiResDiag, sep = "\t")

##################################################################################################

logCationPiResCylinder = join(resUniqueDir, "cationPi_res_cylinder.log")

if cases2run["preprocessing"]:
  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp [ "x" ] < 1.8 ] 
  CationPi_temp = CationPi_temp[ CationPi_temp [ "h" ] > 1.5 ] 
  CationPi_temp = CationPi_temp[ CationPi_temp [ "h" ] < 4.5 ]  
  CationPi_temp = CationPi_temp[ CationPi_temp ['PDB Code'].isin(resOK)]
  CationPi_temp.to_csv( logCationPiResCylinder, sep = "\t")

##################################################################################################

logCationPiResRingPlane = join(resUniqueDir, "cationPi_res_ring_plane.log")

if cases2run["preprocessing"]:
  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp [ "x" ] > 3 ] 
  CationPi_temp = CationPi_temp[ CationPi_temp [ "h" ] < 1 ] 
  CationPi_temp = CationPi_temp[ CationPi_temp [ "x" ] < 4.9 ]  
  CationPi_temp = CationPi_temp[ CationPi_temp ['PDB Code'].isin(resOK)]
  CationPi_temp.to_csv( logCationPiResRingPlane, sep = "\t")

##################################################################################################

# logAnionPi45 = join(resUniqueDir, "anionPi_45.log")
# logAnionPiRes45 = join(resUniqueDir, "anionPi_res_45.log")

# if cases2run["preprocessing"]:
#   AnionPi_temp = AnionPi
#   AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Distance" ] <= 4.5 ] 
#   AnionPi_temp.to_csv( logAnionPi45, sep = "\t")
#   AnionPi_temp = AnionPi_temp[ AnionPi_temp ['PDB Code'].isin(resOK)]
#   AnionPi_temp.to_csv( logAnionPiRes45, sep = "\t")

logCationPiRes45 = join(resUniqueDir, "cationPi_res_45.log")

if cases2run["preprocessing"]:
  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp [ "Distance" ] <= 5.0 ]  
  CationPi_temp = CationPi_temp[ CationPi_temp ['PDB Code'].isin(resOK)]
  CationPi_temp.to_csv( logCationPiRes45, sep = "\t")

##################################################################################################
distAnionCation = 3.25

for dirname, anionPiSource in zip( [ "cylinder" , "ringPlane", "norCylinderNodPlane" ], [ logAnionPiResCylinder, logAnionPiResRingPlane, logAnionPiResDiag ] ):
  print("A-G Analysis")
  print(anionPiSource)
  AnionPi = pd.read_csv( anionPiSource, sep = "\t").fillna("NA") 

  analyseDir = join(postprocessingDir, dirname)

##################################################################################################
  aDir = join(analyseDir, "a")
  if not isdir(aDir):
    makedirs(aDir)
  logAnionPiA = join(aDir, "anionPi.log" )
  logCationPiA = join(aDir, "cationPi.log")
  logAnionCationA = join(aDir, "anionCation.log")

  if cases2run["a-g"]:
    print("lecimy z a")

    AnionPi_temp = AnionPi

    CationPi_temp = CationPi
    CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]

    dataFrames2Merge = [ AnionPi_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [ CationPi_temp ]
    dataFrameExcludeHeaders = [['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]

    [ AnionPi_temp , CationPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    CationPi_temp = CationPi
    CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['0'] )]
    CationPi_temp = CationPi_temp[ ~CationPi_temp[ "Cation code"].astype(str).isin(['ARG', 'LYS'] )]

    AnionCation_temp = AnionCation
    AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] < distAnionCation ] 
    AnionCation_temp = AnionCation_temp[ AnionCation_temp[ "Same semisphere"].astype(str).isin(['True'] )]
    AnionCation_temp = AnionCation_temp[ ~AnionCation_temp[ "Cation code"].astype(str).isin(['ARG', 'LYS'] )]

    ####sprawdzić czy są kationy po przeciwnej stronie pierscienia i jak duzo#####

    dataFrames2Merge = [ AnionPi_temp , CationPi_temp, AnionCation_temp  ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id' , 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id' ,'Anion group id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , CationPi_temp, AnionCation_temp  ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiA, sep = "\t")
    CationPi_temp.to_csv( logCationPiA, sep = "\t")
    AnionCation_temp.to_csv( logAnionCationA, sep = "\t")

##################################################################################################
  bDir = join(analyseDir, "b")
  if not isdir(bDir):
    makedirs(bDir)

  logAnionPiB = join( bDir, "anionPi.log" )
  logCationPiB = join(bDir, "cationPi.log")
  logAnionCationB = join( bDir, "anionCation.log")

  if cases2run["a-g"]: 
    print("lecimy z b")

    AnionPi_temp = AnionPi

    CationPi_temp = CationPi
    CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]

    dataFrames2Merge = [ AnionPi_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [ CationPi_temp ]
    dataFrameExcludeHeaders = [['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]

    [ AnionPi_temp , CationPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionCation_temp = AnionCation
    AnionCation_temp = AnionCation_temp[ AnionCation_temp[ "Same semisphere"].astype(str).isin(['False'] )]

    CationPi_temp = CationPi
    CationPi_temp = CationPi_temp[ ~CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]
    CationPi_temp = CationPi_temp[ CationPi_temp [ "Distance" ] < 5.0 ] 
    CationPi_temp = CationPi_temp[ CationPi_temp [ "Angle" ] < 45.0 ] 

    dataFrames2Merge = [ AnionPi_temp , CationPi_temp , AnionCation_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Anion group id' ,'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id' , 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , CationPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiB, sep = "\t")
    CationPi_temp.to_csv( logCationPiB, sep = "\t")
    AnionCation_temp.to_csv( logAnionCationB, sep = "\t")

##################################################################################################
  cDir = join(analyseDir, "c")
  if not isdir(cDir):
    makedirs(cDir)

  logAnionPiC = join(cDir, "anionPi.log")
  logCationPiC = join( cDir, "cationPi.log" )
  logAnionCationC = join(cDir, "anionCation.log")

  if cases2run["a-g"]:  
    print("lecimy z c")

    AnionPi_temp = AnionPi

    CationPi_temp = CationPi
    CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]

    AnionCation_temp = AnionCation
    AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] < distAnionCation ] 

    dataFrames2Merge = [ AnionPi_temp , CationPi_temp , AnionCation_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , CationPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiC, sep = "\t")
    CationPi_temp.to_csv( logCationPiC, sep = "\t")
    AnionCation_temp.to_csv( logAnionCationC, sep = "\t")

##################################################################################################
  dDir = join(analyseDir, "d")
  if not isdir(dDir):
    makedirs(dDir)

  logAnionPiD = join(dDir, "anionPi.log")
  logPiPiD = join(dDir, "piPi.log")

  if cases2run["a-g"]:
    print("lecimy z d")

    AnionPi_temp = AnionPi

    PiPi_temp = PiPi
    PiPi_temp = PiPi_temp[ PiPi_temp [ "h" ] > 1.6 ] 
    PiPi_temp = PiPi_temp[ PiPi_temp [ "x" ] < 2.2 ] 
    PiPi_temp = PiPi_temp[ PiPi_temp [ "Angle" ] < 15.0 ] 
    PiPi_temp = PiPi_temp[ PiPi_temp [ "theta" ] < 15.0 ] 

    dataFrames2Merge = [ AnionPi_temp , PiPi_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , PiPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiD, sep = "\t") 
    PiPi_temp.to_csv( logPiPiD, sep = "\t") 

##################################################################################################
  eDir = join(analyseDir, "e")
  if not isdir(eDir):
    makedirs(eDir)

  logAnionPiE = join( eDir,  "anionPi.log")
  logPiPiE = join( eDir, "piPi.log" )

  if cases2run["a-g"]:
    print("lecimy z e")

    AnionPi_temp = AnionPi

    PiPi_temp = PiPi
    PiPi_temp = PiPi_temp[ PiPi_temp [ "Angle" ] > 70.0 ] 
    PiPi_temp = PiPi_temp[ PiPi_temp [ "theta" ] > 70.0 ] 
    PiPi_temp = PiPi_temp[ PiPi_temp [ "omega" ] > 70.0 ]

    dataFrames2Merge = [ AnionPi_temp , PiPi_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , PiPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiE, sep = "\t")
    PiPi_temp.to_csv( logPiPiE, sep = "\t")

##################################################################################################
  fDir = join(analyseDir, "f")
  if not isdir(fDir):
    makedirs(fDir)

  logAnionPiF = join(fDir, "anionPi.log")
  logCationPiF = join(fDir, "cationPi.log")
  logAnionCationF = join(fDir, "anionCation.log")

  if cases2run["a-g"]:  
    print("lecimy z f")

    AnionPi_temp = AnionPi

    AnionCation_temp = AnionCation
    AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] < 3.5 ] 

    dataFrames2Merge = [ AnionPi_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [ AnionCation_temp ]
    dataFrameExcludeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]

    [ AnionPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionCation_temp = AnionCation
    AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] > 3.5 ] 

    CationPi_temp = CationPi
    CationPi_temp = CationPi_temp[ CationPi_temp [ "RingChain" ] > 1.0 ] 

    dataFrames2Merge = [ AnionPi_temp , CationPi_temp , AnionCation_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , CationPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiF, sep = "\t")
    CationPi_temp.to_csv( logCationPiF, sep = "\t")
    AnionCation_temp.to_csv( logAnionCationF, sep = "\t")

##################################################################################################
  gDir = join(analyseDir, "g")
  if not isdir(gDir):
    makedirs(gDir)

  logAnionPiG = join(gDir, "anionPi.log")
  logHBondsG = join(gDir, "hbond.log")

  if cases2run["a-g"]:
    print("lecimy z g")

    AnionPi_temp = AnionPi
    #parametry do zmiany: kąt 170-180, H-a 1.2-1.5, d-a 2.4-3
    HBonds_temp = HBonds
    HBonds_temp = HBonds_temp[ HBonds_temp [ "Angle" ] > 150.0 ] 
    HBonds_temp = HBonds_temp[ HBonds_temp [ "Angle" ] < 180.0 ] 
    HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance Don Acc" ] > 2.2 ] 
    HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance Don Acc" ] < 2.8 ] 
    HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance H Acc" ] > 1.2 ] 
    HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance H Acc" ] < 1.7 ] 

    dataFrames2Merge = [ AnionPi_temp , HBonds_temp ]
    dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id']]
    dataFrames2Exclude = [  ]
    dataFrameExcludeHeaders = []

    [ AnionPi_temp , HBonds_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

    AnionPi_temp.to_csv( logAnionPiG, sep = "\t")
    HBonds_temp.to_csv( logHBondsG, sep = "\t")

##################################################################################################
  pureAnionPiDir = join(analyseDir, "pureAnionPi")
  if not isdir(pureAnionPiDir):
    makedirs(pureAnionPiDir)

  logAnionPiPure = join(pureAnionPiDir, "anionPi.log")
  if cases2run["a-g"]:
    cases2exclude = [ logAnionPiA, logAnionPiB, logAnionPiC, logAnionPiD, logAnionPiE, logAnionPiF, logAnionPiG ]

    df = pd.read_table(logAnionPiResCylinder)
    mergingHeaders = ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Pi acid Code', 'Pi acid chain', 'Piacid id']
    for logPath in cases2exclude:
      # print("lol")
      df2exclude = pd.read_table( logPath )

      subMerged = pd.merge( df,  df2exclude[mergingHeaders] , on = mergingHeaders, how='left', indicator=True )
      df = subMerged[ subMerged['_merge'] == 'left_only' ]
      df = df.drop( ['_merge'], axis = 1 )

    df.to_csv( logAnionPiPure, sep = "\t" )

##################################################################################################

  if cases2run["a-g"]:
    files2process = [ logAnionPiA, logAnionPiB, logAnionPiC, logAnionPiD, logAnionPiE, logAnionPiF, logAnionPiG, logAnionPiPure ]

    for f in files2process:
      fOut = f[:-4] + "_UniqueSeq.log"
      saveUniqueRecordsSeq( f, fOut, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )

    for f in [ logCationPiA, logCationPiB, logCationPiC, logCationPiF ]:
      fOut = f[:-4] + "_UniqueSeq.log"
      saveUniqueRecordsSeq( f, fOut,'Cation chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )

    for f in [ logPiPiD, logPiPiE]:
      fOut = f[:-4] + "_UniqueSeq.log"
      saveUniqueRecordsSeq( f, fOut,'Pi res chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Pi res code', 'Pi res id'])

##################################################################################################

  if cases2run["a-g"]:
    def getFreqAnionPi(df):
      dfanion = df.drop_duplicates(subset = [ 'Anion code','Anion id', 'Anion group id', 'PDB Code'])
      dfpiacid = df.drop_duplicates(subset = ['Pi acid Code', 'Piacid id', 'PDB Code'])
      dfpiacidAnion = df.drop_duplicates(subset = ['Pi acid Code', 'Piacid id', 'Anion code','Anion id', 'Anion group id', 'PDB Code'])

      anionFreq = dfanion.groupby("Anion code").size().sort_values(ascending=False)
      PiAcidFreq = dfpiacid.groupby("Pi acid Code").size().sort_values(ascending=False)
      piAcidAnionFreq = dfpiacidAnion.groupby([ "Pi acid Code", "Anion code" ]).size().sort_values(ascending=False)

      anionDict = anionFreq.to_dict()
      PiAcidDict = PiAcidFreq.to_dict()
      piAcidAnionDict = piAcidAnionFreq.to_dict()

      return anionDict, PiAcidDict, piAcidAnionDict

    def getFreqCation(df):
      dfcation = df.drop_duplicates(subset = ['PDB Code', 'Cation code','Cation id'])
      dfpiacid = df.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id'])

      cationFreq = dfcation.groupby("Cation code").size().sort_values(ascending=False)
      PiAcidFreq = dfpiacid.groupby("Pi acid Code").size().sort_values(ascending=False)
      elementFreq = dfcation.groupby("Atom symbol").size().sort_values(ascending=False)

      cationDict = cationFreq.to_dict()
      PiAcidDict = PiAcidFreq.to_dict()
      elementDict = elementFreq.to_dict()

      return cationDict, PiAcidDict, elementDict

    files2process = [ logAnionPiA, logAnionPiB, logAnionPiC, logAnionPiD, logAnionPiE, logAnionPiF, logAnionPiG, logAnionPiPure ]

    for f in files2process:
      fUnique = f[:-4] + "_UniqueSeq.log"
      pdUnique =  pd.read_table( fUnique )
      anDict, piAcidDict, pairsDict = getFreqAnionPi( pdUnique )

      anionStats = open( fUnique[:-4]+"_anions.csv", 'w' )
      anionStats.write("Residue\tOccurences\n")
      for res in anDict:
        anionStats.write(res+"\t"+str(anDict[res]) + "\n")
      anionStats.close()

      piStats = open( fUnique[:-4]+"_piAcids.csv", 'w' )
      piStats.write("Residue\tOccurences\n")
      for res in piAcidDict:
        piStats.write(res+"\t"+str(piAcidDict[res]) + "\n")
      piStats.close()

      pairStats = open( fUnique[:-4]+"_pairs.csv", 'w' )
      pairStats.write("Residue:Residue\tOccurences\n")
      for res in pairsDict:
        pairStats.write(res[0]+":"+res[1]+"\t"+str(pairsDict[res]) + "\n")
      pairStats.close()

      pngName = f[:-4] + "_UniqueSeq_hHist.png"
      distances = pdUnique["h" ].tolist()

      plt.figure()
      plt.rcParams.update({'font.size': 12})
      n, bins, patches = plt.hist(distances, 15, density=False, facecolor='cornflowerblue')
      # plt.colorbar()
      plt.xlabel('$\it{h}$ / $\\AA$')
      plt.ylabel('Number of occurences')
      # if text != "":
      #   plt.text(70, 0.7*max(n), text, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.savefig(pngName, dpi=600, transparent=True)
      plt.close()

      pngName = f[:-4] + "_UniqueSeq_xHist.png"
      x = pdUnique["x" ].tolist()

      plt.figure()
      plt.rcParams.update({'font.size': 12})
      n, bins, patches = plt.hist(x, 15, density=False, facecolor='cornflowerblue')
      # plt.colorbar()
      plt.xlabel('$\it{x}$ / $\\AA$')
      plt.ylabel('Number of occurences')
      # if text != "":
      #   plt.text(70, 0.7*max(n), text, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.savefig(pngName, dpi=600, transparent=True)
      plt.close()

    for f in [ logCationPiA, logCationPiB, logCationPiC, logCationPiF ]:
      fUnique = f[:-4] + "_UniqueSeq.log"

      pdUnique =  pd.read_table( fUnique )
      catDict, piAcidCatDict, catElDict = getFreqCation(pdUnique)

      catElStats = open( fUnique[:-4]+"_catEl.csv", 'w' )
      catElStats.write("Element\tOccurences\n")
      for res in catElDict:
        catElStats.write(res+"\t"+str(catElDict[res]) + "\n")
      catElStats.close()

##################################################################################################
  if cases2run["a-g"]:
    files2process = [ logAnionPiA, logAnionPiB, logAnionPiC, logAnionPiD, logAnionPiE, logAnionPiF, logAnionPiG ]

    for comb in combinations( files2process, 2 ):
      merged = pd.read_table( comb[0][:-4] + "_UniqueSeq.log" )

      for f in comb[1:]:
        newData = pd.read_table( f[:-4] + "_UniqueSeq.log" )
        headers = ['PDB Code', 'Pi acid Code', "Pi acid chain", 'Piacid id', "CentroidId" , 'Anion code', "Anion chain" , 'Anion id', 'Anion group id', "Model No"]
        merged = pd.merge( merged ,  newData, on =  headers )

      print( "intersection between: " )
      print("\n".join(comb))
      print( len(merged.index) )

##################################################################################################

logAnionPiUnique = join( resUniqueDir , basename(logAnionPi)[:-4] +  "_UniqueSeq.log"  )
logAnionPiResUnique = logAnionPiRes[:-4] +  "_UniqueSeq.log"
logAnionPiResCylinderUnique = logAnionPiResCylinder[:-4] +  "_UniqueSeq.log"
logAnionPiResRingPlaneUnique = logAnionPiResRingPlane[:-4] +  "_UniqueSeq.log"
logAnionPiResDiagUnique = logAnionPiResDiag[:-4] +  "_UniqueSeq.log"
# logAnionPi45Unique = logAnionPi45[:-4] +  "_UniqueSeq.log"
# logAnionPiRes45Unique = logAnionPiRes45[:-4]+  "_UniqueSeq.log"

logMethylPiUnique = join( resUniqueDir , basename(logMethylPi)[:-4] +  "_UniqueSeq.log" )
logMethylPiResUnique = logMethylPiRes[:-4] +  "_UniqueSeq.log"

logCationPiUnique = join( resUniqueDir , basename(logCationPi)[:-4] +  "_UniqueSeq.log" )
logCationPiResUnique = logCationPiRes[:-4] +  "_UniqueSeq.log"
logCationPiRes45Unique = logCationPiRes45[:-4] +  "_UniqueSeq.log"
logCationPiResCylinderUnique = logCationPiResCylinder[:-4] +  "_UniqueSeq.log"
logCationPiResRingPlaneUnique = logCationPiResRingPlane[:-4] +  "_UniqueSeq.log"

logPiPiUnique = join( resUniqueDir, basename(logPiPi)[:-4] +  "_UniqueSeq.log" )
logPiPiResUnique = logPiPiRes[:-4] +  "_UniqueSeq.log"

if cases2run["UniqueSeq"]:
  print("unique seq")

  saveUniqueRecordsSeq( logAnionPi, logAnionPiUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecordsSeq( logAnionPiRes, logAnionPiResUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecordsSeq( logAnionPiResCylinder, logAnionPiResCylinderUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecordsSeq( logAnionPiResRingPlane, logAnionPiResRingPlaneUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecordsSeq( logAnionPiResDiag, logAnionPiResDiagUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  # saveUniqueRecordsSeq( logAnionPi45, logAnionPi45Unique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  # saveUniqueRecordsSeq( logAnionPiRes45, logAnionPiRes45Unique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )

  saveUniqueRecordsSeq( logMethylPi, logMethylPiUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecordsSeq( logMethylPiRes, logMethylPiResUnique, 'Anion chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )

  saveUniqueRecordsSeq( logCationPi, logCationPiUnique,'Cation chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )
  saveUniqueRecordsSeq( logCationPiRes, logCationPiResUnique,'Cation chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )
  saveUniqueRecordsSeq( logCationPiResCylinder, logCationPiResCylinderUnique,'Cation chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )
  saveUniqueRecordsSeq( logCationPiResRingPlane, logCationPiResRingPlaneUnique,'Cation chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )
  saveUniqueRecordsSeq( logCationPiRes45, logCationPiRes45Unique,'Cation chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )

  saveUniqueRecordsSeq( logPiPi, logPiPiUnique, 'Pi res chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Pi res code', 'Pi res id'] )
  saveUniqueRecordsSeq( logPiPiRes, logPiPiResUnique,'Pi res chain', 'Pi acid chain', [ 'Pi acid Code', 'Piacid id', 'Pi res code', 'Pi res id'] )  


##################################################################################################

if cases2run["histogram2d"]:
  def anionPiHist2D(df, pngName, bin, text="", minX = 0, maxX = 4.5, minH = 0, maxH = 4.5):
    x = df["x"].tolist()
    h = df["h"].tolist()
    plt.figure()
    plt.rcParams.update({'font.size': 12})

    plt.hist2d(x, h, bins = bin, cmap=plt.cm.turbo, range= [[minX, maxX], [minH, maxH]])
    plt.colorbar()
    plt.xlabel('$\it{x}$ / $\\AA$')
    plt.ylabel('$\it{h}$ / $\\AA$')
    if text != "":
    	plt.text(3.5, 4.0, text, fontsize = 16, color='w',horizontalalignment='center', verticalalignment='center', weight='bold')
    plt.savefig(pngName, dpi=600, transparent=True)
    plt.close()

  def anionPiHist2DNormalizedVolume(df, pngName, bin, text="", minX = 0, maxX = 4.5, minH = 0, maxH = 4.5):
    x = df["x"].tolist()
    h = df["h"].tolist()
    

    H, xedges, yedges = np.histogram2d(x, y, bins=bin, range= [[minX, maxX], [minH, maxH]])
    
    xNo, yNo = H.shape
    ringH = yedges[1] - yedges[0]

    for xInd in range(xNo):
      ringVolume = pi*ringH*( xedges[xInd+1]**2-xedges[xInd]**2 )
      H[xInd,:] = H[xInd,:]/ringVolume

    plt.figure()
    plt.rcParams.update({'font.size': 12})
    X, Y = np.meshgrid(xedges, yedges)
    plt.pcolormesh(X, Y, H, cmap=plt.cm.turbo)
    if text != "":
      plt.text(3.5, 4.0, text, fontsize = 16, color='w',horizontalalignment='center', verticalalignment='center', weight='bold')

    plt.savefig(pngName, dpi=600, transparent=True)
    plt.close()

  def overwievHistograms( logPath, plotDir , bin, minX = 0, maxX = 5.0, minH = 0, maxH = 5.0 ):
    df = pd.read_table(logPath)

    anionPiHist2D(df, join(plotDir ,basename(logPath)[:-4] + ".png"), bin, "", minX , maxX , minH , maxH )
    anionPiHist2D(df[df["Pi acid Code"]!="HIS"], join(plotDir ,basename(logPath)[:-4] + "_noHIS.png"), bin, "", minX , maxX , minH , maxH )
    anionPiHist2D(df[df["Pi acid Code"]!="PHE"], join(plotDir ,basename(logPath)[:-4] + "_noPHE.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2D(df[df["Pi acid Code"]!="TYR"], join(plotDir ,basename(logPath)[:-4] + "_noTYR.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2D(df[df["Pi acid Code"]!="TRP"], join(plotDir ,basename(logPath)[:-4] + "_noTRP.png"), bin, "", minX , maxX , minH , maxH)  
    anionPiHist2D(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR"]) ], join(plotDir ,basename(logPath)[:-4] + "_noHaa.png"), bin, "",  minX , maxX , minH , maxH)
    anionPiHist2D(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE"]) ], join(plotDir ,basename(logPath)[:-4] + "_noAA.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2D(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE", "A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI"]) ], join(plotDir ,basename(logPath)[:-4] + "_noAA_noNU.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2D(df[df["Pi acid Code"].isin(["A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI"]) ], join(plotDir ,basename(logPath)[:-4] + "_onlyNU.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2D(df[df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE"]) ], join(plotDir ,basename(logPath)[:-4] + "_onlyAA.png"), bin, "", minX , maxX , minH , maxH)

  def overwievHistogramsNormalizedVolume( logPath, plotDir , bin, minX = 0, maxX = 5.0, minH = 0, maxH = 5.0 ):
    df = pd.read_table(logPath)

    anionPiHist2DNormalizedVolume(df, join(plotDir ,basename(logPath)[:-4] + ".png"), bin, "", minX , maxX , minH , maxH )
    anionPiHist2DNormalizedVolume(df[df["Pi acid Code"]!="HIS"], join(plotDir ,basename(logPath)[:-4] + "_noHIS.png"), bin, "", minX , maxX , minH , maxH )
    anionPiHist2DNormalizedVolume(df[df["Pi acid Code"]!="PHE"], join(plotDir ,basename(logPath)[:-4] + "_noPHE.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2DNormalizedVolume(df[df["Pi acid Code"]!="TYR"], join(plotDir ,basename(logPath)[:-4] + "_noTYR.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2DNormalizedVolume(df[df["Pi acid Code"]!="TRP"], join(plotDir ,basename(logPath)[:-4] + "_noTRP.png"), bin, "", minX , maxX , minH , maxH)  
    anionPiHist2DNormalizedVolume(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR"]) ], join(plotDir ,basename(logPath)[:-4] + "_noHaa.png"), bin, "",  minX , maxX , minH , maxH)
    anionPiHist2DNormalizedVolume(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE"]) ], join(plotDir ,basename(logPath)[:-4] + "_noAA.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2DNormalizedVolume(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE", "A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI"]) ], join(plotDir ,basename(logPath)[:-4] + "_noAA_noNU.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2DNormalizedVolume(df[df["Pi acid Code"].isin(["A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI"]) ], join(plotDir ,basename(logPath)[:-4] + "_onlyNU.png"), bin, "", minX , maxX , minH , maxH)
    anionPiHist2DNormalizedVolume(df[df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE"]) ], join(plotDir ,basename(logPath)[:-4] + "_onlyAA.png"), bin, "", minX , maxX , minH , maxH)


  mainHistDir = join(postprocessingDir, "hist2d")
  for pngFile in glob( join(mainHistDir, "*/*png") ):
  	remove(pngFile)

  histAnionsDir = join(mainHistDir, "anions")
  histPiAcidsDir = join(mainHistDir, "piAcids")
  histPiAcidCationDir = join( mainHistDir, "piAcidsCations" )
  histCationDir = join( mainHistDir, "cations" )
  histOverwievDir = join(mainHistDir, "overwiev")
  histNormolizedVolumeDir= join(mainHistDir, "normalizedVolume")

  for plotsDir in [ histOverwievDir, histAnionsDir, histPiAcidsDir, histPiAcidCationDir, mainHistDir , histCationDir, histNormolizedVolumeDir]:
  	if not isdir(plotsDir):
	    makedirs(plotsDir)

  bin = (250,250)
  overwievHistogramsNormalizedVolume( logAnionPiResUnique, histNormolizedVolumeDir, bin )
  overwievHistograms( logAnionPiUnique, histOverwievDir, bin )
  overwievHistograms( logAnionPiResUnique, histOverwievDir, bin )
  
  # overwievHistograms( logAnionPi45Unique,  histOverwievDir, bin, 0, 4.5, 0, 4.5  )
  # overwievHistograms( logAnionPiRes45Unique,  histOverwievDir, bin, 0, 4.5, 0, 4.5   )

  dfCatPiUnique = pd.read_table(logCationPiUnique)
  dfCatPiUniqueMetals = dfCatPiUnique[  ~dfCatPiUnique['Cation code'].isin([ "ARG", "LYS" ]) ]
  logCationPiUniqueMetals = join( postprocessingDir, "cationPiUniqueMetals.log" )
  dfCatPiUniqueMetals.to_csv(logCationPiUniqueMetals,sep='\t')
  del dfCatPiUniqueMetals

  dfCatPiUniqueArgLys = dfCatPiUnique[  dfCatPiUnique['Cation code'].isin([ "ARG", "LYS" ]) ]
  logCatPiUniqueArgLys = join( postprocessingDir, "cationPiUniqueArgLys.log" )
  dfCatPiUniqueArgLys.to_csv(logCatPiUniqueArgLys,sep='\t')
  del dfCatPiUniqueArgLys

  dfCatPiUniqueDist = dfCatPiUnique[  dfCatPiUnique['Distance'] < 5.0  ]
  logdfCatPiUniqueDist = join( postprocessingDir, "cationPiUniqueDist.log" )
  dfCatPiUniqueDist.to_csv(logdfCatPiUniqueDist,sep='\t')
  del dfCatPiUniqueDist

  overwievHistograms( logCationPiUniqueMetals, histOverwievDir, bin )
  overwievHistograms( logCatPiUniqueArgLys, histOverwievDir, bin )
  overwievHistograms( logdfCatPiUniqueDist, histOverwievDir, bin )

  dfCatPiUnique = pd.read_table(logCationPiResUnique)
  dfCatPiUniqueMetals = dfCatPiUnique[  ~dfCatPiUnique['Cation code'].isin([ "ARG", "LYS" ]) ]
  logCationPiUniqueMetals = join( postprocessingDir, "cationPiResUniqueMetals.log" )
  dfCatPiUniqueMetals.to_csv(logCationPiUniqueMetals,sep='\t')
  del dfCatPiUniqueMetals

  dfCatPiUniqueArgLys = dfCatPiUnique[  dfCatPiUnique['Cation code'].isin([ "ARG", "LYS" ]) ]
  logCatPiUniqueArgLys = join( postprocessingDir, "cationPiResUniqueArgLys.log" )
  dfCatPiUniqueArgLys.to_csv(logCatPiUniqueArgLys,sep='\t')
  del dfCatPiUniqueArgLys

  dfCatPiUniqueDist = dfCatPiUnique[  dfCatPiUnique['Distance'] < 5.0  ]
  logdfCatPiUniqueDist = join( postprocessingDir, "cationPiResUniqueDist.log" )
  dfCatPiUniqueDist.to_csv(logdfCatPiUniqueDist,sep='\t')
  
  cationFreq = dfCatPiUniqueDist.groupby('Cation code').size().to_dict()
  piAcidCationFreq = dfCatPiUniqueDist.groupby("Pi acid Code").size().to_dict()

  for cat in cationFreq:
    if cationFreq[cat] > 100:
      anionPiHist2D(dfCatPiUniqueDist[dfCatPiUniqueDist["Cation code"]==cat], join( histCationDir ,cat+ ".png"), (100,100), cat, 0.0, 5.0, 0.0, 5.0)

  for pa in piAcidCationFreq:
    if piAcidCationFreq[pa] > 100:
      anionPiHist2D(dfCatPiUniqueDist[dfCatPiUniqueDist["Pi acid Code"]==pa], join( histPiAcidCationDir ,pa+ ".png"), (100,100), pa, 0.0, 5.0, 0.0, 5.0)

  overwievHistograms( logCationPiUniqueMetals, histOverwievDir, bin )
  overwievHistograms( logCatPiUniqueArgLys, histOverwievDir, bin )
  overwievHistograms( logdfCatPiUniqueDist, histOverwievDir, bin )

  overwievHistograms( logPiPiUnique, histOverwievDir, bin )
  overwievHistograms( logPiPiResUnique, histOverwievDir, bin )

  overwievHistograms( logMethylPiUnique, histOverwievDir, bin )
  overwievHistograms( logMethylPiResUnique, histOverwievDir, bin )

  # df = pd.read_table(logAnionPiRes45Unique)
  df = pd.read_table(logAnionPiResUnique)
  df_cylinder = pd.read_table( logAnionPiResCylinderUnique)

  anionFreq = df_cylinder.groupby("Anion code").size()
  allAnions = anionFreq.to_dict()

  PiAcidFreq = df_cylinder.groupby("Pi acid Code").size()
  allPiAcids = PiAcidFreq.to_dict()

  for anion in allAnions:
  	if allAnions[anion] > 100:
	    anionPiHist2D(df[df["Anion code"]==anion], join( histAnionsDir ,anion+ ".png"), (100,100), anion, 0.0, 5.0, 0.0, 5.0)

  for piAcid in allPiAcids:
  	if allPiAcids[piAcid] > 100:
  		anionPiHist2D(df[df["Pi acid Code"]==piAcid], join( histPiAcidsDir ,piAcid+ ".png"), (100,100), piAcid, 0.0, 5.0, 0.0, 5.0)

##################################################################################################

if cases2run["histogram2d-planar"]:
  def anionPiPlanarHist2D(df, pngName, bin, text="", minX = 0, maxX = 90, minY = 0, maxY = 180):
    x = df["PlanarAngle"].tolist()
    h = df["DirectionalAngle"].tolist()
    plt.figure()
    plt.rcParams.update({'font.size': 12})
    # plt.hist2d(x, h, bins = bin, cmap=plt.cm.turbo, range= [[minX, maxX], [minY, maxY]])
    n, bins, patches = plt.hist(x, bin, density=False, facecolor='cornflowerblue')
    # plt.colorbar()
    plt.xlabel('$\it{\\alpha}$ / $^{\circ}$ ')
    plt.xlim([0,90])
    plt.ylabel('Number of occurences')
    if text != "":
      plt.text(70, 0.7*max(n), text, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
    plt.savefig(pngName, dpi=600, transparent=True)
    plt.close()


  mainPlanarHistDir = join(postprocessingDir, "hist2d_planarAnions")
  for pngFile in glob( join(mainPlanarHistDir, "*png") ):
    remove(pngFile)

  for plotsDir in [ mainPlanarHistDir ]:
    if not isdir(plotsDir):
      makedirs(plotsDir)


  dfPlanarAnionPi = pd.read_csv( logPlanarAnionPi, sep = "\t").fillna("NA").rename(columns = { "Angle" : "PlanarAngle" }).drop( ['Centroid x coord','Centroid y coord','Centroid z coord'], axis = 1 )

  for logAP, pngBasename in zip([ logAnionPiResCylinderUnique, logAnionPiResDiagUnique, logAnionPiResRingPlaneUnique ], ["_cylinder", "_norCylinderNorPlane", "_ringPlane"]):
	  df2merge = pd.read_table( logAP )

	  headers = ['PDB Code', 'Pi acid Code', "Pi acid chain", 'Piacid id', "CentroidId" , 'Anion code', "Anion chain" , 'Anion id', 'Anion group id', "Model No"]

	  dfMerged = pd.merge( dfPlanarAnionPi,  df2merge, on =  headers )
	  dfMerged.to_csv( join( mainPlanarHistDir, "planarAnionPi"+pngBasename+"_ResUniqueSeq.csv" ) ,sep='\t')

	  anionFreq = dfMerged.groupby("Anion code").size()
	  allAnions = anionFreq.to_dict()

	  for anion in allAnions:
	    if allAnions[anion] > 40:
	      anionPiPlanarHist2D(dfMerged[dfMerged["Anion code"]==anion], join( mainPlanarHistDir ,anion+pngBasename+ ".png"), 18, anion)


if cases2run["histograms-linear"]:
  def anionPiLinearHist2D(df, pngName, bin, text="", minX = 0, maxX = 90, minY = 0, maxY = 180):
    xOrig = df["LinearAngle"].tolist()
    x = []
    for xVal in xOrig:
    	x.append( abs( xVal - 90 ) )
    	# if xVal > 90:
    	# 	x.append(180-xVal)
    	# else:
    	# 	x.append(xVal)

    # h = df["DirectionalAngle"].tolist()
    plt.figure()
    plt.rcParams.update({'font.size': 12})
    # plt.hist2d(x, h, bins = bin, cmap=plt.cm.turbo, range= [[minX, maxX], [minY, maxY]])
    n, bins, patches = plt.hist(x, bin, density=False, facecolor='cornflowerblue')
    # plt.colorbar()
    plt.xlabel('$\it{\\alpha}$ / $^{\circ}$ ')
    plt.xlim([0,90])
    plt.ylabel('Number of occurences')
    if text != "":
      plt.text(70, 0.7*max(n), text, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
    plt.savefig(pngName, dpi=600, transparent=True)
    plt.close()


  mainLinearHistDir = join(postprocessingDir, "hist_linearAnions")
  for pngFile in glob( join(mainLinearHistDir, "*png") ):
    remove(pngFile)

  for plotsDir in [ mainLinearHistDir ]:
    if not isdir(plotsDir):
      makedirs(plotsDir)


  dfLinearAnionPi = pd.read_csv( logLinearAnionPi, sep = "\t").fillna("NA").rename(columns = { "Angle" : "LinearAngle" }).drop( ['Centroid x coord','Centroid y coord','Centroid z coord'], axis = 1 )

  for logAP, pngBasename in zip([ logAnionPiResCylinderUnique, logAnionPiResDiagUnique, logAnionPiResRingPlaneUnique ], ["_cylinder", "_norCylinderNorPlane", "_ringPlane"]):
	  df2merge = pd.read_table( logAP )

	  headers = ['PDB Code', 'Pi acid Code', "Pi acid chain", 'Piacid id', "CentroidId" , 'Anion code', "Anion chain" , 'Anion id', 'Anion group id', "Model No"]

	  dfMerged = pd.merge( dfLinearAnionPi,  df2merge, on =  headers )
	  dfMerged.to_csv( join( mainLinearHistDir, "linearAnionPi"+pngBasename+"_ResUniqueSeq.csv" ) ,sep='\t')

	  anionFreq = dfMerged.groupby("Anion code").size()
	  allAnions = anionFreq.to_dict()

	  for anion in allAnions:
	    if allAnions[anion] > 40:
	      anionPiLinearHist2D(dfMerged[dfMerged["Anion code"]==anion], join( mainLinearHistDir ,anion+pngBasename+ ".png"), 18, anion)

##################################################################################################

if cases2run["barplots"]:
  def anionPiPlotBar( data, pngName ):
    plt.figure()
    plt.bar(list(data.keys()), list(data.values()), color = "gold" )
    plt.savefig(pngName, dpi=600, format='png', transparent=True)
    plt.close()

  logs = [ logAnionPiResCylinderUnique , logAnionPiResRingPlaneUnique , logAnionPiResDiagUnique , logCationPiResCylinderUnique, logCationPiResRingPlaneUnique ]
  plotbarDir = join(postprocessingDir, "barplots") 
  if not isdir(plotbarDir):
  	makedirs(plotbarDir)

  plotbarDirCationPi = join(plotbarDir, "cationPi") 
  if not isdir(plotbarDirCationPi):
  	makedirs(plotbarDirCationPi)

  acidicaa = ["ASP","GLU"]
  aa = ["ALA", "CYS", "PHE", "GLY", "HIS", "ILE", "LYS",
        "LEU", "MET", "ASN", "PRO", "GLN", "ARG", "SER", "THR", "VAL", "TRP", "TYR"]
  nu = ["A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI" ]

  aCodes = acidicaa + aa + nu          
  piAcids =["PHE","TYR","HIS","TRP"] + nu

  nbar=10

  for log, pngBasename, directory, ionHeader in zip(logs, ["cylinder", "ringPlane" , "norCylinderNorPlane" , "cylinder", "ringPlane"  ], [ plotbarDir, plotbarDir, plotbarDir, plotbarDirCationPi, plotbarDirCationPi ] , [ "Anion code", "Anion code", "Anion code", "Cation code", "Cation code" ] ):
  	  df = pd.read_table(log)
  	  df2 = df.drop_duplicates(subset = ['PDB Code'])

  	  anionFreq = df.groupby(ionHeader).size().sort_values(ascending=False)
  	  PiAcidFreq = df.groupby("Pi acid Code").size().sort_values(ascending=False)

  	  if ionHeader == "Anion code":
  	  	typeFreq = df2.groupby("Structure type").size().sort_values(ascending=False)

  	  anionDict = anionFreq.head(nbar).to_dict()
  	  PiAcidDict = PiAcidFreq.head(nbar).to_dict()
  	  typesDict = typeFreq.head(nbar).to_dict() 

  	  anionPiPlotBar( anionDict, join(directory , pngBasename+"_topIons.png"))
  	  anionPiPlotBar( PiAcidDict, join(directory , pngBasename+"_topPiAcids.png"))
  	  print(log)

  	  anionDict = anionFreq.to_dict()
  	  PiAcidDict = PiAcidFreq.to_dict()

  	  if ionHeader == "Anion code":
  	  	typesDict = typeFreq.to_dict() 

  	  for key in aCodes:
  	  	if key in anionDict:
  	  	  del anionDict[key]

  	  for key in piAcids:
  	  	if key in PiAcidDict:
  	  	  del PiAcidDict[key]

  	  anionDict = {k: v for k, v in sorted(anionDict.items(), key=lambda item: item[1], reverse = True)[:nbar]}
  	  PiAcidDict = {k: v for k, v in sorted(PiAcidDict.items(), key=lambda item: item[1], reverse = True)[:nbar]}
  	  print("top ions")
  	  print(anionDict)
  	  print("top pi acids")
  	  print(PiAcidDict)
  	  anionPiPlotBar( anionDict, join(directory , pngBasename+"_topIons_AA_NU_excluded.png") )
  	  anionPiPlotBar( PiAcidDict, join(directory , pngBasename+"_topPiAcids_AA_NU_excluded.png") )

  	  df3 = df[[ionHeader, 'Pi acid Code']]
  	  pairs = df3.groupby([ionHeader, "Pi acid Code"]).size().sort_values(ascending=False)
  	  pairsDict = pairs.head(10).to_dict()
  	  print(log)
  	  print(pairsDict)
  	  if ionHeader == "Anion code":
  	  	print(typesDict)

  	  labels = []
  	  key2convert = list(pairsDict.keys())

  	  for key in key2convert:
  	  	labels.append(str(key))

  	  plt.figure(figsize=(16, 8))
  	  plt.bar(labels, list(pairsDict.values()), color = "gold" )
  	  plt.savefig( join(directory , pngBasename+"_top_pairs_ion_piAcid.png"), dpi=600, transparent=True)

##################################################################################################

if cases2run["resolutionplot"]:
  # AnionPi_temp = pd.read_csv( logAnionPiUnique, sep = "\t").fillna("NA")
  AnionPi_temp = pd.read_csv( logCationPiUnique, sep = "\t").fillna("NA")

  resolutionDF = pd.read_csv("resolu.idx", sep = "\s+")
  resolutionDF = resolutionDF.rename( columns = { "IDCODE" : 'PDB Code' })
  AnionPi_temp = pd.merge( AnionPi_temp,  resolutionDF, on =  [ 'PDB Code'  ] )
  AnionPi_temp = AnionPi_temp[ (AnionPi_temp [ "RESOLUTION" ] < 5) & (AnionPi_temp [ "RESOLUTION" ] > 0) ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Method" ] == "X-RAY DIFFRACTION"] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Structure type" ] == "protein"] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Anion code" ] == "GLU" ]
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Pi acid Code" ] == "PHE" ]
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 1.8 ]
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] > 1.5 ]
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Cation code" ] == "LYS" ]
  # fullSphere = AnionPi_temp.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'])
  fullSphere = AnionPi_temp

  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] > 0.0 ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 1.8 ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Angle" ] < 45.0 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 3.5 ]
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 3.5 ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Distance" ] < 4.5 ] 

  # insideCone = AnionPi_temp.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'])
  insideCone = AnionPi_temp
  resMin = min(fullSphere["RESOLUTION"])
  resMax = max(fullSphere["RESOLUTION"])

  nbins = 30

  fullSphereCounts, fullSphereBins = np.histogram( fullSphere["RESOLUTION"], bins = nbins, range = ( resMin, resMax )  )
  insideConeCounts, insideConeBins = np.histogram( insideCone["RESOLUTION"], bins = nbins, range = ( resMin, resMax )  )

  print( fullSphereBins )
  print( insideConeBins )
  cone2fullSphere = []
  i = 0
  x = []
  fullX = []

  countsPerPDBsphere = []
  countsPerPDBcone = []
  pdbInCone2pdbInSphere = []

  for cone, sphere in zip(insideConeCounts,fullSphereCounts):
    if sphere > 10 and cone > 10:
      cone2fullSphere.append( 100*cone/sphere )
      x.append( ( insideConeBins[i] + insideConeBins[i+1])/2 )
      pdbInResRangeSphere = len(fullSphere[(fullSphere [ "RESOLUTION" ] > insideConeBins[i]) & (fullSphere [ "RESOLUTION" ] < insideConeBins[i+1])].drop_duplicates(subset=["PDB Code"]).index)
      pdbInResRangeCone = len(insideCone[(insideCone [ "RESOLUTION" ] > insideConeBins[i]) & (insideCone [ "RESOLUTION" ] < insideConeBins[i+1])].drop_duplicates(subset=["PDB Code"]).index)
      countsPerPDBsphere.append( sphere/pdbInResRangeSphere )
      countsPerPDBcone.append( cone/pdbInResRangeSphere )
      pdbInCone2pdbInSphere.append( pdbInResRangeCone/pdbInResRangeSphere )


    fullX.append( ( insideConeBins[i] + insideConeBins[i+1])/2 )
    i += 1

  plt.figure()
  plt.plot(x, cone2fullSphere )
  plt.xlabel('resolution ${\\AA}$')
  plt.savefig(join( postprocessingDir, "resolution.png"), dpi=600, transparent=True)
  plt.show()

################################################################################

if cases2run["occurencesTable"]:
  def getFreq(df):
    dfanion = df.drop_duplicates(subset = ['PDB Code', 'Anion code','Anion id'])
    dfpiacid = df.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id'])

    anionFreq = dfanion.groupby("Anion code").size().sort_values(ascending=False)
    PiAcidFreq = dfpiacid.groupby("Pi acid Code").size().sort_values(ascending=False)

    anionDict = anionFreq.to_dict()
    PiAcidDict = PiAcidFreq.to_dict()

    return anionDict, PiAcidDict

  def getFreqCation(df):
    dfcation = df.drop_duplicates(subset = ['PDB Code', 'Cation code','Cation id'])
    dfpiacid = df.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id'])

    cationFreq = dfcation.groupby("Cation code").size().sort_values(ascending=False)
    PiAcidFreq = dfpiacid.groupby("Pi acid Code").size().sort_values(ascending=False)

    cationDict = cationFreq.to_dict()
    PiAcidDict = PiAcidFreq.to_dict()

    return cationDict, PiAcidDict

  dfSphere = pd.read_table(logAnionPiResUnique)
  anionSphere, piAcidSphere = getFreq(dfSphere)

  for APlog in [  logAnionPiResCylinderUnique, logAnionPiResDiagUnique, logAnionPiResRingPlaneUnique ]:
    operatingDir = APlog[:-4]+"_tables"
    if not isdir(operatingDir):
      makedirs(operatingDir)

    dfCylinder = pd.read_table(APlog)
    anionCylinder, piAcidCylinder = getFreq(dfCylinder)

    selectedResAnions = list( anionCylinder.keys() )

    table = open(join(operatingDir, "anionsOccurencesFull.csv" ), "w")
    table.write( "\t".join(["Residue", "in sphere", "in cylinder", "cylinder/sphere"]) +"\n" )
    for res in selectedResAnions:
    	table.write(res + "\t")
    	numbers = [  anionSphere[res], anionCylinder[res], 100*anionCylinder[res]/anionSphere[res]  ]
    	table.write( "\t".join( [ str(num) for num in numbers ] ) )
    	table.write("\n")

    table.close()

    selectedResPiAcids = list( piAcidCylinder.keys() )
    table = open(join(operatingDir, "piAcidOccurencesFull.csv" ), "w")
    table.write( "\t".join(["Residue", "in sphere", "in cylinder", "cylinder/sphere"]) +"\n" )
    for res in selectedResPiAcids:
    	table.write(res + "\t")
    	numbers = [  piAcidSphere[res], piAcidCylinder[res], 100*piAcidCylinder[res]/piAcidSphere[res]  ]
    	table.write( "\t".join( [ str(num) for num in numbers ] ) )
    	table.write("\n")

    table.close()

    table = open(join(operatingDir, "anionsOccurencesSmall.csv" ), "w")
    table.write( "\t".join(["Residue", "in sphere", "in cylinder", "cylinder/sphere"]) +"\n" )
    for res in selectedResAnions:
    	if anionCylinder[res] >= 100:
    		table.write(res + "\t")
    		numbers = [  anionSphere[res], anionCylinder[res], 100*anionCylinder[res]/anionSphere[res]   ]
    		table.write( "\t".join( [ str(num) for num in numbers ] ) )
    		table.write("\n")

    table.close()

    table = open(join(operatingDir, "piAcidOccurencesSmall.csv" ), "w")
    table.write( "\t".join(["Residue", "in sphere", "in cylinder", "cylinder/sphere"]) +"\n" )
    for res in selectedResPiAcids:
    	if piAcidCylinder[res] >= 100:
    		table.write(res + "\t")
    		numbers = [  piAcidSphere[res], piAcidCylinder[res], 100*piAcidCylinder[res]/piAcidSphere[res]  ]
    		table.write( "\t".join( [ str(num) for num in numbers ] ) )
    		table.write("\n")

    table.close()

  dfSphere = pd.read_table(logCationPiRes45Unique)
  dfCylinder = pd.read_table(logCationPiResCylinderUnique)

  cationSphere, piAcidCationSphere = getFreqCation(dfSphere)
  cationCylinder, piAcidCationCylinder = getFreqCation(dfCylinder)

  selectedResCations = list( cationCylinder.keys() )
  table = open(join(resUniqueDir, "cationsOccurencesFull.csv" ), "w")
  table.write( "\t".join(["Residue", "in sphere", "in cylinder", "cylinder/sphere"]) +"\n" )
  for res in selectedResCations:
  	table.write(res + "\t")
  	numbers = [  cationSphere[res], cationCylinder[res], 100*cationCylinder[res]/cationSphere[res]  ]
  	table.write( "\t".join( [ str(num) for num in numbers ] ) )
  	table.write("\n")

  table.close()

  selectedResPiAcids = list( piAcidCationCylinder.keys() )
  table = open(join(resUniqueDir, "piAcidCationOccurencesFull.csv" ), "w")
  table.write( "\t".join(["Residue", "in sphere", "in cylinder", "cylinder/sphere"]) +"\n" )
  for res in selectedResPiAcids:
  	table.write(res + "\t")
  	numbers = [  piAcidCationSphere[res], piAcidCationCylinder[res], 100*piAcidCationCylinder[res]/piAcidCationSphere[res] ]
  	table.write( "\t".join( [ str(num) for num in numbers ] ) )
  	table.write("\n")

  table.close()
################################################################################
if cases2run["occurencesPairs"]:
  for logAP in [ logAnionPiResCylinderUnique, logAnionPiResDiagUnique, logAnionPiResRingPlaneUnique ]:
  	df = pd.read_table(logAP)

  	df2 = df[['Anion code', 'Pi acid Code']]

  	pairs = df2.groupby(["Anion code", "Pi acid Code"]).size().sort_values(ascending=False)

  	pairsDict = pairs.to_dict()

  	AnionCode = df['Anion code'].drop_duplicates()
  	allAnionCode = AnionCode.tolist()

  	PiAcidCode = df['Pi acid Code'].drop_duplicates()
  	allPiAcidCode = PiAcidCode.tolist()

  	acidicaa = ["ASP","GLU"]
  	aa = ["ALA", "CYS", "PHE", "GLY", "HIS", "ILE", "LYS",
  	      "LEU", "MET", "ASN", "PRO", "GLN", "ARG", "SER", "THR", "VAL", "TRP", "TYR"]
  	nu = ["A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI" ]

  	aCodes = acidicaa + aa + nu          
  	piAcids =["PHE","TYR","HIS","TRP"] + nu

  	tabela = open( logAP[:-4] +"_tabela.csv",'w')
  	tabela.write("piacid\t")

  	for a in aCodes:
  	    tabela.write(a+"\t")
  	tabela.write("Others\n")

  	grandTotal = pairs.sum()
  	for piacid in piAcids:
  	    tabela.write(piacid+"\t")
  	    total = 0
  	    for key in pairsDict:
  	        if key[1] == piacid:
  	            total += pairsDict[key]
  	    
  	    for anion in aCodes:
  	        key = ( anion, piacid)
  	        if  key in pairsDict:
  	            anion_piacid_counts = pairsDict[key]
  	            anion_piacid_counts_str = str(anion_piacid_counts)
  	            tabela.write(anion_piacid_counts_str+"\t")
  	            total -= anion_piacid_counts
  	            grandTotal-= anion_piacid_counts
  	        else:
  	            tabela.write("0\t")

  	    tabela.write(str(total)+"\n")
  	    grandTotal-= total    
  	tabela.write("Others\t")

  	for anion in aCodes:
  	    total = 0
  	    for key in pairsDict:
  	        if key[0] == anion:
  	            total += pairsDict[key]
  	    
  	    for piacid in piAcids:
  	        key = ( anion, piacid)
  	        if  key in pairsDict:
  	            piacid_counts = pairsDict[key]
  	            total -= piacid_counts
  	            
  	    tabela.write(str(total)+"\t")
  	    grandTotal-= total
  	    
  	tabela.write(str(grandTotal)+"\n")
  	tabela.close()
################################################################################
if cases2run["chainNeoghbors"]:
  cnbarDir = join(postprocessingDir, "chainNeighbors") 
  if not isdir(cnbarDir):
    makedirs(cnbarDir)

  for pngFile in glob( join(cnbarDir, "*png") ):
    remove(pngFile)

  AnionPi_temp = pd.read_table( logAnionPiResUnique )
  AnionPi_temp = AnionPi_temp[ AnionPi_temp[ "Pi acid Code"].astype(str).isin(['PHE', 'HIS', 'TRP', 'TYR'] )]
  AnionPi_temp = AnionPi_temp[ AnionPi_temp[ "Anion code"].astype(str).isin(['ASP', 'GLU'] )]
  AnionPi_temp = AnionPi_temp[ AnionPi_temp["Pi acid chain" ] == AnionPi_temp["Anion chain"]  ]

  AnionPi_temp["chainDist"] = AnionPi_temp[ 'Piacid id'] - AnionPi_temp[ 'Anion id'  ]
  # AnionPi_temp["chainDist"] = AnionPi_temp["chainDist"].abs()

  AnionPi_temp = AnionPi_temp[ (AnionPi_temp["chainDist"] < 100 ) & (AnionPi_temp["chainDist"] > -100 ) ]

  # print("Wielkosc zerowego slupka")
  # print( len(AnionPi_temp[ AnionPi_temp[ "chainDist" ] == 0 ].index) )
  # AnionPi_temp[ AnionPi_temp[ "chainDist" ] == 0 ].to_csv( join(cnbarDir, "zeroDiffChain.csv"), sep = "\t")

  for anion in ['ASP', 'GLU']:
    for piAcid in ['PHE', 'HIS', 'TRP', 'TYR'] :
      # temp = AnionPi_temp[ (AnionPi_temp["Anion code"] == anion ) & ( AnionPi_temp[ "Pi acid Code"] == piAcid ) ]
      # freq = temp.groupby("chainDist").size().sort_values(ascending=False)
      # data = freq.to_dict()

      # plt.figure()
      # plt.bar(list(data.keys()), list(data.values()), color = "gold" )
      # plt.savefig(join(cnbarDir, anion + "_full.png"), dpi=600, format='png', transparent=True)
      # plt.close()

      temp = AnionPi_temp[ (AnionPi_temp["Anion code"] == anion ) & ( AnionPi_temp[ "Pi acid Code"] == piAcid ) ]
      temp = temp[ temp [ "x" ] < 1.8 ] 
      temp = temp[ temp [ "h" ] > 1.5 ] 
      temp = temp[ temp [ "h" ] < 4.5 ]  

      freq = temp.groupby("chainDist").size().sort_values(ascending=False)
      data = freq.to_dict()

      plt.figure()
      plt.bar(list(data.keys()), list(data.values()), color = "gold" )
      plt.text(70, 0.7*max(data.values()), anion + "-"+ piAcid, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.text(-70, 0.7*max(data.values()), piAcid + "-"+ anion , fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.savefig(join(cnbarDir, anion + "_"+ piAcid+"_cylinder.png"), dpi=600, format='png', transparent=True)
      plt.close()


      temp = AnionPi_temp[ (AnionPi_temp["Anion code"] == anion ) & ( AnionPi_temp[ "Pi acid Code"] == piAcid ) ]
      temp = temp[ temp [ "x" ] > 3 ] 
      temp = temp[ temp [ "h" ] < 1 ] 
      temp = temp[ temp [ "x" ] < 4.9 ] 
      
      freq = temp.groupby("chainDist").size().sort_values(ascending=False)
      data = freq.to_dict()

      plt.figure()
      plt.bar(list(data.keys()), list(data.values()), color = "gold" )
      plt.text(70, 0.7*max(data.values()), anion + "-"+ piAcid, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.text(-70, 0.7*max(data.values()), piAcid + "-"+ anion , fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.savefig(join(cnbarDir, anion +"_"+ piAcid+ "_ringPlane.png"), dpi=600, format='png', transparent=True)
      plt.close()

      temp = AnionPi_temp[ (AnionPi_temp["Anion code"] == anion ) & ( AnionPi_temp[ "Pi acid Code"] == piAcid ) ]
      temp = temp[ temp["x"] > 1.8 ]
      temp = temp[ temp["h"] > 2.4 ]
      temp = temp[ temp["x"] < 3.25 ]
      temp = temp[ temp["h"] < 3.8 ]
      
      freq = temp.groupby("chainDist").size().sort_values(ascending=False)
      data = freq.to_dict()

      plt.figure()
      plt.bar(list(data.keys()), list(data.values()), color = "gold" )
      plt.text(70, 0.7*max(data.values()), anion + "-"+ piAcid, fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.text(-70, 0.7*max(data.values()), piAcid + "-"+ anion , fontsize = 16, color='k',horizontalalignment='center', verticalalignment='center', weight='bold')
      plt.savefig(join(cnbarDir, anion +"_"+ piAcid+ "_norCylinderNorPlane.png"), dpi=600, format='png', transparent=True)
      plt.close()

