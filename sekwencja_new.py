#Script generated by SupremolecularAnalyser
import sys

sys.path.insert(0, "/net/archive/groups/plggkatksdh/pyplotTest")

import matplotlib.pyplot as plt
from simpleFilters import *
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.colors as mcolors
from os.path import isdir, join, basename
from os import makedirs



mpl.rcParams['mathtext.default'] = 'regular'

logDir = "logs/"
postprocessingDir = "postprocessing/"
resUniqueDir = join(postprocessingDir, "general")

if not isdir(resUniqueDir):
	makedirs(resUniqueDir)

# cases2run = { "preprocessing" : True, "a" : True, "b" : True, "c" : True,
#        "d" : True, "e" : True, "f" :True,
#        "g" : True, "Unique" : True, "histogram2d" : True, "barplots": True , "resolutionplot":False }

cases2run = { "preprocessing" : False, "a" : False, "b" : False, "c" : False,
       "d" : False, "e" : False, "f" :False,
       "g" : False, "Unique" : False, "histogram2d" : True, "barplots": False , "resolutionplot":False }

logAnionPi = join( logDir, "anionPi.log" )
logAnionCation = join(logDir, "anionCation.log")
logCationPi = join( logDir, "cationPi.log" )
logPiPi = join( logDir, "piPi.log")
logMethylPi = join(logDir, "methylPi.log")

if cases2run["preprocessing"]:
  AnionPi = pd.read_csv( logAnionPi, sep = "\t").fillna("NA") 
  # LinearAnionPi = pd.read_csv( logdir+"linearAnionPi.log", sep = "\t").fillna("NA") 
  AnionCation = pd.read_csv( logAnionCation, sep = "\t").fillna("NA")
  HBonds = pd.read_csv( logDir+"hBonds.log", sep = "\t").fillna("NA") 
  CationPi = pd.read_csv( logCationPi, sep = "\t").fillna("NA") 
  PiPi = pd.read_csv( logPiPi, sep = "\t").fillna("NA") 
  # MetalLigand = pd.read_csv( logdir+"metalLigand.log", sep = "\t").fillna("NA") 
  # PlanarAnionPi = pd.read_csv( logdir+"planarAnionPi.log", sep = "\t").fillna("NA") 
  methylPi = pd.read_csv( logMethylPi, sep = "\t").fillna("NA") 

resolution = pd.read_csv("resolu.idx", sep = "\s+")
resOK = resolution[(resolution["RESOLUTION"]<=2.5) & (resolution["RESOLUTION"]>0)]["IDCODE"]

##################################################################################################
logAnionPiRes = join(resUniqueDir, "anionPi_res.log")
logMethylPiRes =  join(resUniqueDir, "methylPi_res.log")
logCationPiRes = join(resUniqueDir, "cationPi_res.log")
logPiPiRes = join(resUniqueDir, "piPi_res.log")

if cases2run["preprocessing"]:
  def keepHighResolution(df, logName):
  	df_temp = df[ df ['PDB Code'].isin(resOK)]
  	# logName = join(resUniqueDir, baseName+"_res.log")
  	df_temp.to_csv( logName, sep = "\t")
  	return logName

  keepHighResolution(AnionPi, logAnionPiRes )
  keepHighResolution(methylPi, logMethylPiRes )
  keepHighResolution(CationPi, logCationPiRes)
  keepHighResolution(PiPi, logPiPiRes)
  

##################################################################################################
logAnionPiResRingPlane = join(resUniqueDir, "anionPi_res_ring_plane.log")

if cases2run["preprocessing"]:
  AnionPi_temp = AnionPi
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] > 2 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 1.2 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp ['PDB Code'].isin(resOK)]
  AnionPi_temp.to_csv( logAnionPiResRingPlane, sep = "\t")

##################################################################################################
logAnionPiResCylinder = join(resUniqueDir, "anionPi_res_cylinder.log")

if cases2run["preprocessing"]:
  AnionPi_temp = AnionPi
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 1.8 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] > 1.5 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp ['PDB Code'].isin(resOK)]
  AnionPi_temp.to_csv( logAnionPiResCylinder, sep = "\t")

##################################################################################################

AnionPi = pd.read_csv( logAnionPiResCylinder, sep = "\t").fillna("NA") 
distAnionCation = 3.25

##################################################################################################
aDir = join(postprocessingDir, "a")
if not isdir(aDir):
  makedirs(aDir)
logAnionPiA = join(aDir, "anionPi.log" )
logCationPiA = join(aDir, "cationPi.log")
logAnionCationA = join(aDir, "anionCation.log")

if cases2run["a"]:
  print("lecimy z a")

  AnionPi_temp = AnionPi

  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]

  dataFrames2Merge = [ AnionPi_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [ CationPi_temp ]
  dataFrameExcludeHeaders = [['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]

  [ AnionPi_temp , CationPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['0'] )]
  CationPi_temp = CationPi_temp[ ~CationPi_temp[ "Cation code"].astype(str).isin(['ARG', 'LYS'] )]

  AnionCation_temp = AnionCation
  AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] < distAnionCation ] 
  AnionCation_temp = AnionCation_temp[ AnionCation_temp[ "Same semisphere"].astype(str).isin(['True'] )]
  AnionCation_temp = AnionCation_temp[ ~AnionCation_temp[ "Cation code"].astype(str).isin(['ARG', 'LYS'] )]

  ####sprawdzić czy są kationy po przeciwnej stronie pierscienia i jak duzo#####

  dataFrames2Merge = [ AnionPi_temp , CationPi_temp, AnionCation_temp  ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id' , 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id' ,'Anion group id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , CationPi_temp, AnionCation_temp  ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiA, sep = "\t")
  CationPi_temp.to_csv( logCationPiA, sep = "\t")
  AnionCation_temp.to_csv( logAnionCationA, sep = "\t")

##################################################################################################
bDir = join(postprocessingDir, "b")
if not isdir(bDir):
  makedirs(bDir)

logAnionPiB = join( bDir, "anionPi.log" )
logCationPiB = join(bDir, "cationPi.log")
logAnionCationB = join( bDir, "anionCation.log")

if cases2run["b"]: 
  print("lecimy z b")

  AnionPi_temp = AnionPi

  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]

  dataFrames2Merge = [ AnionPi_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [ CationPi_temp ]
  dataFrameExcludeHeaders = [['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]

  [ AnionPi_temp , CationPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionCation_temp = AnionCation
  AnionCation_temp = AnionCation_temp[ AnionCation_temp[ "Same semisphere"].astype(str).isin(['False'] )]

  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ ~CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]
  CationPi_temp = CationPi_temp[ CationPi_temp [ "Distance" ] < 5.0 ] 
  CationPi_temp = CationPi_temp[ CationPi_temp [ "Angle" ] < 45.0 ] 

  dataFrames2Merge = [ AnionPi_temp , CationPi_temp , AnionCation_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Anion group id' ,'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id' , 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , CationPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiB, sep = "\t")
  CationPi_temp.to_csv( logCationPiB, sep = "\t")
  AnionCation_temp.to_csv( logAnionCationB, sep = "\t")

##################################################################################################
cDir = join(postprocessingDir, "c")
if not isdir(cDir):
  makedirs(cDir)

logAnionPiC = join(cDir, "anionPi.log")
logCationPiC = join( cDir, "cationPi.log" )
logAnionCationC = join(cDir, "anionCation.log")

if cases2run["c"]:  
  print("lecimy z c")

  AnionPi_temp = AnionPi

  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp[ "RingChain"].astype(str).isin(['1'] )]

  AnionCation_temp = AnionCation
  AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] < distAnionCation ] 

  dataFrames2Merge = [ AnionPi_temp , CationPi_temp , AnionCation_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , CationPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiC, sep = "\t")
  CationPi_temp.to_csv( logCationPiC, sep = "\t")
  AnionCation_temp.to_csv( logAnionCationC, sep = "\t")

##################################################################################################
dDir = join(postprocessingDir, "d")
if not isdir(dDir):
  makedirs(dDir)

logAnionPiD = join(dDir, "anionPi.log")
logPiPiD = join(dDir, "piPi.log")

if cases2run["d"]:
  print("lecimy z d")

  AnionPi_temp = AnionPi

  PiPi_temp = PiPi
  PiPi_temp = PiPi_temp[ PiPi_temp [ "h" ] > 1.6 ] 
  PiPi_temp = PiPi_temp[ PiPi_temp [ "x" ] < 2.2 ] 
  PiPi_temp = PiPi_temp[ PiPi_temp [ "Angle" ] < 15.0 ] 
  PiPi_temp = PiPi_temp[ PiPi_temp [ "theta" ] < 15.0 ] 

  dataFrames2Merge = [ AnionPi_temp , PiPi_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , PiPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiD, sep = "\t") 
  PiPi_temp.to_csv( logPiPiD, sep = "\t") 

##################################################################################################
eDir = join(postprocessingDir, "e")
if not isdir(eDir):
  makedirs(eDir)

logAnionPiE = join( eDir,  "anionPi.log")
logPiPiE = join( eDir, "piPi.log" )

if cases2run["e"]:
  print("lecimy z e")

  AnionPi_temp = AnionPi

  PiPi_temp = PiPi
  PiPi_temp = PiPi_temp[ PiPi_temp [ "Angle" ] > 70.0 ] 
  PiPi_temp = PiPi_temp[ PiPi_temp [ "theta" ] > 70.0 ] 
  PiPi_temp = PiPi_temp[ PiPi_temp [ "omega" ] > 70.0 ]

  dataFrames2Merge = [ AnionPi_temp , PiPi_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , PiPi_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiE, sep = "\t")
  PiPi_temp.to_csv( logPiPiE, sep = "\t")

##################################################################################################
fDir = join(postprocessingDir, "f")
if not isdir(fDir):
  makedirs(fDir)

logAnionPiF = join(fDir, "anionPi.log")
logCationPiF = join(fDir, "cationPi.log")
logAnionCationF = join(fDir, "anionCation.log")

if cases2run["f"]:  
  print("lecimy z f")

  AnionPi_temp = AnionPi

  AnionCation_temp = AnionCation
  AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] < 3.5 ] 

  dataFrames2Merge = [ AnionPi_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [ AnionCation_temp ]
  dataFrameExcludeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]

  [ AnionPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionCation_temp = AnionCation
  AnionCation_temp = AnionCation_temp[ AnionCation_temp [ "Distance" ] > 3.5 ] 

  CationPi_temp = CationPi
  CationPi_temp = CationPi_temp[ CationPi_temp [ "RingChain" ] > 1.0 ] 

  dataFrames2Merge = [ AnionPi_temp , CationPi_temp , AnionCation_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id', 'Cation code', 'Cation chain', 'Cation id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , CationPi_temp , AnionCation_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiF, sep = "\t")
  CationPi_temp.to_csv( logCationPiF, sep = "\t")
  AnionCation_temp.to_csv( logAnionCationF, sep = "\t")

##################################################################################################
gDir = join(postprocessingDir, "g")
if not isdir(gDir):
  makedirs(gDir)

logAnionPiG = join(gDir, "anionPi.log")
logHBondsG = join(gDir, "hbond.log")

if cases2run["g"]:
  print("lecimy z g")

  AnionPi_temp = AnionPi
  #parametry do zmiany: kąt 170-180, H-a 1.2-1.5, d-a 2.4-3
  HBonds_temp = HBonds
  HBonds_temp = HBonds_temp[ HBonds_temp [ "Angle" ] > 150.0 ] 
  HBonds_temp = HBonds_temp[ HBonds_temp [ "Angle" ] < 180.0 ] 
  HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance Don Acc" ] > 2.2 ] 
  HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance Don Acc" ] < 2.8 ] 
  HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance H Acc" ] > 1.2 ] 
  HBonds_temp = HBonds_temp[ HBonds_temp [ "Distance H Acc" ] < 1.7 ] 

  dataFrames2Merge = [ AnionPi_temp , HBonds_temp ]
  dataFrameMergeHeaders = [['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id', 'Pi acid Code', 'Pi acid chain', 'Piacid id', 'CentroidId'], ['PDB Code', 'Model No', 'Anion code', 'Anion chain', 'Anion id','Anion group id']]
  dataFrames2Exclude = [  ]
  dataFrameExcludeHeaders = []

  [ AnionPi_temp , HBonds_temp ] = simpleMerge(dataFrames2Merge ,dataFrameMergeHeaders, dataFrames2Exclude,  dataFrameExcludeHeaders)

  AnionPi_temp.to_csv( logAnionPiG, sep = "\t")
  HBonds_temp.to_csv( logHBondsG, sep = "\t")

##################################################################################################
logAnionPiUnique = join( resUniqueDir , basename(logAnionPi)[:-4] +  "_Unique.log"  )
logAnionPiResUnique = logAnionPiRes[:-4] +  "_Unique.log"
logAnionPiResCylinderUnique = logAnionPiResCylinder[:-4] +  "_Unique.log"
logAnionPiResRingPlaneUnique = logAnionPiResRingPlane[:-4] +  "_Unique.log"

logMethylPiUnique = join( resUniqueDir , basename(logMethylPi)[:-4] +  "_Unique.log" )
logMethylPiResUnique = logMethylPiRes[:-4] +  "_Unique.log"

logCationPiUnique = join( resUniqueDir , basename(logCationPi)[:-4] +  "_Unique.log" )
logCationPiResUnique = logCationPiRes[:-4] +  "_Unique.log"

logPiPiUnique = join( resUniqueDir, basename(logPiPi)[:-4] +  "_Unique.log" )
logPiPiResUnique = logPiPiRes[:-4] +  "_Unique.log"

if cases2run["Unique"]:
  files2process = [ logAnionPiA, logAnionPiB, logAnionPiC, logAnionPiD, logAnionPiE, logAnionPiF, logAnionPiG ]

  def saveUniqueRecords( logPath, logOut, chain1Key, chain2Key, headersSubset ):
      print("Aktualnie przetwarzam: ", logPath)
  
      df = pd.read_table(logPath)

      dfSameChains = df[ df[chain1Key] == df[chain2Key]  ]
      dfSameChains = dfSameChains.sort_values(by=['Distance'],ascending=True)
      
      dfSameChains = dfSameChains.drop_duplicates(subset = headersSubset)

      dfDifferentChains = df[ df[chain1Key] != df[chain2Key]  ]
      dfDifferentChains = dfDifferentChains.sort_values(by=['Distance'],ascending=True)
      
      dfDifferentChains = dfDifferentChains.drop_duplicates(subset = headersSubset)
      
      df = pd.concat( [ dfSameChains, dfDifferentChains ], ignore_index = True )

      df.to_csv(logOut,sep='\t')
      num_lines = sum(1 for line in open(logOut))-1
      num_lines2 = sum(1 for line in open(logPath))-1
      
      print(num_lines)
      print(num_lines2)

      return logOut

  for f in files2process:
  	fOut = f[:-4] + "_Unique.log"
  	saveUniqueRecords( f, fOut, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )

  saveUniqueRecords( logAnionPi, logAnionPiUnique, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecords( logAnionPiRes, logAnionPiResUnique, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecords( logAnionPiResCylinder, logAnionPiResCylinderUnique, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecords( logAnionPiResRingPlane, logAnionPiResRingPlaneUnique, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  
  saveUniqueRecords( logMethylPi, logMethylPiUnique, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )
  saveUniqueRecords( logMethylPiRes, logMethylPiResUnique, 'Anion chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'] )

  saveUniqueRecords( logCationPi, logCationPiUnique,'Cation chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )
  saveUniqueRecords( logCationPiRes, logCationPiResUnique,'Cation chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Cation code', 'Cation id'] )

  saveUniqueRecords( logPiPi, logPiPiUnique, 'Pi res chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Pi res code', 'Pi res id'] )
  saveUniqueRecords( logPiPiRes, logPiPiResUnique,'Pi res chain', 'Pi acid chain', ['PDB Code', 'Pi acid Code', 'Piacid id', 'Pi res code', 'Pi res id'] )  

##################################################################################################

if cases2run["histogram2d"]:
  def anionPiHist2D(df, pngName, bin, text=""):
    x = df["x"].tolist()
    h = df["h"].tolist()
    plt.figure()
    plt.hist2d(x, h, bins = bin, cmap=plt.cm.turbo, range= [[0, 5.0], [0, 5.0]])
    plt.colorbar()
    plt.xlabel('$\it{x}$ / $\\AA$')
    plt.ylabel('$\it{h}$ / $\\AA$')
    if text != "":
    	plt.text(3.5, 4.0, text, fontsize = 16, color='w',horizontalalignment='center', verticalalignment='center', weight='bold')
    plt.savefig(pngName, dpi=600, transparent=True)
    plt.close()

  def overwievHistograms( logPath, plotDir , bin ):
  	df = pd.read_table(logPath)

  	anionPiHist2D(df, join(plotDir ,basename(logPath)[:-4] + ".png"), bin)
  	anionPiHist2D(df[df["Pi acid Code"]!="HIS"], join(plotDir ,basename(logPath)[:-4] + "_noHIS.png"), bin)
  	anionPiHist2D(df[df["Pi acid Code"]!="PHE"], join(plotDir ,basename(logPath)[:-4] + "_noPHE.png"), bin)
  	anionPiHist2D(df[df["Pi acid Code"]!="TYR"], join(plotDir ,basename(logPath)[:-4] + "_noTYR.png"), bin)
  	anionPiHist2D(df[df["Pi acid Code"]!="TRP"], join(plotDir ,basename(logPath)[:-4] + "_noTRP.png"), bin)
  	anionPiHist2D(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR"]) ], join(plotDir ,basename(logPath)[:-4] + "_noHaa.png"), bin)
  	anionPiHist2D(df[~df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE"]) ], join(plotDir ,basename(logPath)[:-4] + "_noAA.png"), bin)
  	anionPiHist2D(df[df["Pi acid Code"].isin(["HIS","TRP","TYR","PHE"]) ], join(plotDir ,basename(logPath)[:-4] + "_onlyAA.png"), bin)


  mainHistDir = join(postprocessingDir, "hist2d")

  histAnionsDir = join(mainHistDir, "anions")
  histPiAcidsDir = join(mainHistDir, "piAcids")
  histOverwievDir = join(mainHistDir, "overwiev")

  for plotsDir in [ histOverwievDir, histAnionsDir, histPiAcidsDir ]:
  	if not isdir(plotsDir):
	    makedirs(plotsDir)

  bin = (400,90)

  overwievHistograms( logAnionPiUnique, histOverwievDir, bin )
  overwievHistograms( logAnionPiResUnique, histOverwievDir, bin )

  overwievHistograms( logCationPiUnique, histOverwievDir, bin )
  overwievHistograms( logCationPiResUnique, histOverwievDir, bin )

  overwievHistograms( logPiPiUnique, histOverwievDir, bin )
  overwievHistograms( logPiPiResUnique, histOverwievDir, bin )

  overwievHistograms( logMethylPiUnique, histOverwievDir, bin )
  overwievHistograms( logMethylPiResUnique, histOverwievDir, bin )

  df = pd.read_table(logAnionPiResUnique)
  df_cylinder = pd.read_table( logAnionPiResCylinderUnique)

  anionFreq = df_cylinder.groupby("Anion code").size()
  allAnions = anionFreq.to_dict()

  PiAcidFreq = df_cylinder.groupby("Pi acid Code").size()
  allPiAcids = PiAcidFreq.to_dict()

  for anion in allAnions:
  	if allAnions[anion] > 100:
	    anionPiHist2D(df[df["Anion code"]==anion], join( histAnionsDir ,anion+ ".png"), (40,90), anion)

  for piAcid in allPiAcids:
  	if allPiAcids[piAcid] > 100:
  		anionPiHist2D(df[df["Pi acid Code"]==piAcid], join( histPiAcidsDir ,piAcid+ ".png"), (40,90), piAcid)


##################################################################################################

if cases2run["barplots"]:
  def anionPiPlotBar( data, pngName ):
    plt.figure()
    plt.bar(list(data.keys()), list(data.values()), color = "gold" )
    plt.savefig(pngName, dpi=600, format='png', transparent=True)
    plt.close()

  logs = [ logAnionPiResCylinderUnique , logAnionPiResRingPlaneUnique]
  plotbarDir = join(postprocessingDir, "barplots") 
  if not isdir(plotbarDir):
  	makedirs(plotbarDir)

  acidicaa = ["ASP","GLU"]
  aa = ["ALA", "CYS", "PHE", "GLY", "HIS", "ILE", "LYS",
        "LEU", "MET", "ASN", "PRO", "GLN", "ARG", "SER", "THR", "VAL", "TRP", "TYR"]
  nu = ["A","G","T","C","U","I","DA", "DC", "DG", "DT", "DI" ]

  aCodes = acidicaa + aa + nu          
  piAcids =["PHE","TYR","HIS","TRP"] + nu

  nbar=10

  for log, pngBasename in zip(logs, ["cylinder", "ringPlane" ] ):
      df = pd.read_table(log)
      df2 = df.drop_duplicates(subset = ['PDB Code'])
      
      anionFreq = df.groupby("Anion code").size().sort_values(ascending=False)
      PiAcidFreq = df.groupby("Pi acid Code").size().sort_values(ascending=False)
      typeFreq = df2.groupby("Structure type").size().sort_values(ascending=False)

      anionDict = anionFreq.head(nbar).to_dict()
      PiAcidDict = PiAcidFreq.head(nbar).to_dict()
      typesDict = typeFreq.head(nbar).to_dict() 
      
      anionPiPlotBar( anionDict, join(plotbarDir , pngBasename+"_topAnions.png"))
      anionPiPlotBar( PiAcidDict, join(plotbarDir , pngBasename+"_topPiAcids.png"))
      print(log)

      # anionPiPlotBar(typesDict.keys())[:15], list(typesDict.values())[:15], color = "gold" )
      # plt.savefig("../wykresy/najczestsze_polytype_"+log+".png", dpi=600, format='png', transparent=True)
      anionDict = anionFreq.to_dict()
      PiAcidDict = PiAcidFreq.to_dict()
      typesDict = typeFreq.to_dict() 

      for key in aCodes:
        if key in anionDict:
          del anionDict[key]
          
      for key in piAcids:
        if key in PiAcidDict:
          del PiAcidDict[key]
      
      anionDict = {k: v for k, v in sorted(anionDict.items(), key=lambda item: item[1], reverse = True)[:nbar]}
      PiAcidDict = {k: v for k, v in sorted(PiAcidDict.items(), key=lambda item: item[1], reverse = True)[:nbar]}
      print("top anions")
      print(anionDict)
      print("top pi acids")
      print(PiAcidDict)
      anionPiPlotBar( anionDict, join(plotbarDir , pngBasename+"_topAnions_AA_NU_excluded.png") )
      anionPiPlotBar( PiAcidDict, join(plotbarDir , pngBasename+"_topPiAcids_AA_NU_excluded.png") )
      
      df3 = df[['Anion code', 'Pi acid Code']]
      pairs = df3.groupby(["Anion code", "Pi acid Code"]).size().sort_values(ascending=False)
      pairsDict = pairs.head(10).to_dict()
      print(log)
      print(pairsDict)
      print(typesDict)
          
      labels = []
      key2convert = list(pairsDict.keys())
      
      for key in key2convert:
          labels.append(str(key))
      
      plt.figure(figsize=(16, 8))
      plt.bar(labels, list(pairsDict.values()), color = "gold" )
      plt.savefig( join(plotbarDir , pngBasename+"_top_pairs_anion_piAcid.png"), dpi=600, transparent=True)

##################################################################################################

if cases2run["resolutionplot"]:
  AnionPi_temp = pd.read_csv( logdir+"anionPi_res_Unique.log", sep = "\t").fillna("NA")
  AnionPi_temp = AnionPi_temp[ (AnionPi_temp [ "Resolution" ] < 5) & (AnionPi_temp [ "Resolution" ] > 0) ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Method" ] == "X-RAY DIFFRACTION"] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Structure type" ] == "protein"] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Anion code" ] == "GLU" ]
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Pi acid Code" ] == "HIS" ]
  fullSphere = AnionPi_temp.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'])

  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] > 0.0 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "x" ] < 1.6 ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "Angle" ] < 45.0 ] 
  AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] > 1.5 ] 
  # AnionPi_temp = AnionPi_temp[ AnionPi_temp [ "h" ] < 4.0 ] 

  insideCone = AnionPi_temp.drop_duplicates(subset = ['PDB Code', 'Pi acid Code', 'Piacid id', 'Anion code', 'Anion id', 'Anion group id'])

  resMin = min(fullSphere["Resolution"])
  resMax = max(fullSphere["Resolution"])

  nbins = 30

  fullSphereCounts, fullSphereBins = np.histogram( fullSphere["Resolution"], bins = nbins, range = ( resMin, resMax )  )
  insideConeCounts, insideConeBins = np.histogram( insideCone["Resolution"], bins = nbins, range = ( resMin, resMax )  )

  print( fullSphereBins )
  print( insideConeBins )
  cone2fullSphere = []
  i = 0
  x = []
  fullX = []

  countsPerPDBsphere = []
  countsPerPDBcone = []
  pdbInCone2pdbInSphere = []

  for cone, sphere in zip(insideConeCounts,fullSphereCounts):
    if sphere > 10 and cone > 10:
      cone2fullSphere.append( 100*cone/sphere )
      x.append( ( insideConeBins[i] + insideConeBins[i+1])/2 )
      pdbInResRangeSphere = len(fullSphere[(fullSphere [ "Resolution" ] > insideConeBins[i]) & (fullSphere [ "Resolution" ] < insideConeBins[i+1])].drop_duplicates(subset=["PDB Code"]).index)
      pdbInResRangeCone = len(insideCone[(insideCone [ "Resolution" ] > insideConeBins[i]) & (insideCone [ "Resolution" ] < insideConeBins[i+1])].drop_duplicates(subset=["PDB Code"]).index)
      countsPerPDBsphere.append( sphere/pdbInResRangeSphere )
      countsPerPDBcone.append( cone/pdbInResRangeSphere )
      pdbInCone2pdbInSphere.append( pdbInResRangeCone/pdbInResRangeSphere )


    fullX.append( ( insideConeBins[i] + insideConeBins[i+1])/2 )
    i += 1

  plt.figure()
  plt.plot(x, cone2fullSphere )
  plt.xlabel('resolution ${\\AA}$')
  plt.savefig("resolution.png", dpi=600, transparent=True)
  plt.show()

  # plt.figure()
  # plt.plot(x, countsPerPDBcone )
  # plt.plot(x, countsPerPDBsphere )
  # plt.xlabel('resolution ${\\AA}$')
  # plt.legend(["cone", "sphere"])
  # plt.savefig("kurwaMac.png", dpi=600, transparent=True)
  # plt.show()

  # plt.figure()
  # plt.plot(x, pdbInCone2pdbInSphere )
  # plt.xlabel('resolution ${\\AA}$')
  # plt.title("Stosunek liczby plikow")
  # plt.savefig("ojaJebie.png", dpi=600, transparent=True)
  # plt.show()

  # plt.figure()
  # plt.plot(fullX, insideConeCounts , '*' )
  # plt.xlabel('resolution ${\\AA}$')
  # plt.ylabel('$\\alpha$/deg')
  # plt.title("inside cone counts")
  # plt.savefig("coneCounts.png", dpi=600, transparent=True)
  # plt.show()

  # plt.figure()
  # plt.plot(fullX, fullSphereCounts , '*' )
  # plt.xlabel('resolution ${\\AA}$')
  # plt.ylabel('$\\alpha$/deg')
  # plt.title("inside sphere counts")
  # plt.savefig("sphereCounts.png", dpi=600, transparent=True)
  # plt.show()
  # plt.close()